// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1735.AerialAssist2014;
import org.usfirst.frc1735.AerialAssist2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton gyroReset;
    public JoystickButton shootAnyway;
    public Joystick rotationJoystick;
    public JoystickButton emergencyDrivetrainStop;
    public JoystickButton driverShoot;
    public JoystickButton driverRetractShooter;
    public JoystickButton driverGyroReset;
    public JoystickButton driverShootToHuman;
    public JoystickButton driverShootFromCorner;
    public Joystick driveJoystick;
    public JoystickButton collectOutfeed;
    public JoystickButton collectInfeed;
    public JoystickButton stopCollector;
    public JoystickButton deployOut;
    public JoystickButton deployIn;
    public JoystickButton deployStop;
    public Joystick accessoryJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Temporary hacks for tuning the new tankDrive system:
    public static double firstBallDriveTimeout = 2.875;
    public static double firstBallDriveSpeed = 0.45;
    public static double firstShotStrength = 1.0;
    public static double firstBallRollerTimeout = 3;
    public static double backDriveTimeout = 0.2;
    public static double backDriveSpeed = -0.45;
    public static double secondShotStrength = 0.925;
    public static double motorCompensation = 1.0; //percentage backoff for faster motors to allow straight tracking
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        accessoryJoystick = new Joystick(3);
        
        deployStop = new JoystickButton(accessoryJoystick, 10);
        deployStop.whileHeld(new CollectDeployStop());
        deployIn = new JoystickButton(accessoryJoystick, 8);
        deployIn.whenPressed(new CollectDeployRetract());
        deployOut = new JoystickButton(accessoryJoystick, 9);
        deployOut.whenPressed(new CollectDeployExtend());
        stopCollector = new JoystickButton(accessoryJoystick, 3);
        stopCollector.whenPressed(new CollectRollerStop());
        collectInfeed = new JoystickButton(accessoryJoystick, 4);
        collectInfeed.whenPressed(new CollectRollerIn());
        collectOutfeed = new JoystickButton(accessoryJoystick, 5);
        collectOutfeed.whenPressed(new CollectRollerOut());
        driveJoystick = new Joystick(2);
        
        driverShootFromCorner = new JoystickButton(driveJoystick, 8);
        driverShootFromCorner.whenPressed(new ShootFromCorner());
        driverShootToHuman = new JoystickButton(driveJoystick, 5);
        driverShootToHuman.whenPressed(new ShootToHuman());
        driverGyroReset = new JoystickButton(driveJoystick, 10);
        driverGyroReset.whenPressed(new ResetGyro());
        driverRetractShooter = new JoystickButton(driveJoystick, 2);
        driverRetractShooter.whenPressed(new ShootRetract());
        driverShoot = new JoystickButton(driveJoystick, 1);
        driverShoot.whenPressed(new DeployThenShootAndRetract());
        emergencyDrivetrainStop = new JoystickButton(driveJoystick, 6);
        emergencyDrivetrainStop.whileHeld(new StopDrivetrain());
        rotationJoystick = new Joystick(1);
        
        shootAnyway = new JoystickButton(rotationJoystick, 3);
        shootAnyway.whileHeld(new ShootExtend());
        gyroReset = new JoystickButton(rotationJoystick, 10);
        gyroReset.whenPressed(new ResetGyro());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Reset Gyro", new ResetGyro());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // This code adds a selectable object to select which Autonomous mode we wish to invoke:
        Robot.AutoMode.addDefault("1 Ball By Distance", "0"); // Default behavior
        Robot.AutoMode.addObject("Do Nothing", "1");          // In the rare case we want/need to disable Autonomous operation
        Robot.AutoMode.addObject("1 Ball By Time", "2");      // Dead Reckoning
        Robot.AutoMode.addObject("2 Balls By Distance", "3"); // Our stretch goal!
        Robot.AutoMode.addObject("2 Balls By Time", "4");     // Backoff of stretch goal if rangefinder doesn't work.
        SmartDashboard.putData("Automode", Robot.AutoMode);
        // More hacks for tuning TankDrive system:
        // Make the overrides visible/overridable via the SmartDashboard.  Must do this here in OI to be visible before we start Autonomous mode.
        //SmartDashboard.putNumber("firstBallDriveTimeout", firstBallDriveTimeout);
        //SmartDashboard.putNumber("firstBallDriveSpeed", firstBallDriveSpeed);
        SmartDashboard.putNumber("firstShotStrength", firstShotStrength);
        //SmartDashboard.putNumber("firstBallRollerTimeout", firstBallRollerTimeout);
        //SmartDashboard.putNumber("backDriveTimeout", backDriveTimeout);
        //SmartDashboard.putNumber("backDriveSpeed", backDriveSpeed);
        SmartDashboard.putNumber("secondShotStrength", secondShotStrength);
        SmartDashboard.putNumber("motorCompensation", motorCompensation);
        
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getRotationJoystick() {
        return rotationJoystick;
    }
    public Joystick getDriveJoystick() {
        return driveJoystick;
    }
    public Joystick getAccessoryJoystick() {
        return accessoryJoystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
