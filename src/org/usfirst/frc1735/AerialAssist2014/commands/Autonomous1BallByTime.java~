// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Autonomous1BallByTime extends CommandGroup {
    
    public  Autonomous1BallByTime() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        
        // Plan:  Drive for a set amount of time, deploy Collector, and shoot the ball.
        
        // Reset the gyro so that we have the most accurate driving direction
        addSequential(new ResetGyro());
        // Grab the drive timeout from the SmartDashboard.  It was populated with the hard-coded value in IO.java, but may have been overridden.
        //double timeout = SmartDashboard.getNumber("firstBallDriveTimeout", 2.875); // a one second default should be easy to see if we accidentally got it
        //double magnitude = SmartDashboard.getNumber("firstBallDriveSpeed", 1); // a 10% default should be easy to see if we accidentally got it
        addParallel(new CollectRollerIn(2.875)); // keep roller going while we drive to help keep ball in place
        addSequential(new DriveWithLimits(2.875,0, 0.65)); // x second or 0 feet from wall (goalie zone), whichever comes first.
        // Collector is sequential because we need it to hold the ball while moving
        // This fully deploys the collector to a max limit (the hard stop limit switch, unless we eventually add a string pot to the deploy arm.
        // Also note that we could instead use CollectDeployPastInterlock, if we had a stringpot and enabled this "just get barely out of the way" feature.
        addParallel(new CollectRollerIn(0.5));
        addSequential(new CollectDeployExtend());
        //turn roller on to un-jam ball
        addSequential(new Delay(1)); // let ball settle
        //double magnitude = SmartDashboard.getNumber("firstShotStrength", .30); // a 30% default should be easy to see if we accidentally got it
        addSequential(new ShootExtend(.95)); // We are out of the way via the previous command.
        addSequential(new ShootRetract());// also retract the shooter when done.
        
    }
}
