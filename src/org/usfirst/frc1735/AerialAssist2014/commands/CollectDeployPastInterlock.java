// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1735.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1735.AerialAssist2014.Robot;
/**
 *
 */
public class  CollectDeployPastInterlock extends Command {
    public CollectDeployPastInterlock() {
        this(1); // if called without args (as with a button press) provide a default timeout in seconds.
    }
    
    public CollectDeployPastInterlock(double timeout) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.collectorDeployer);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        setTimeout(timeout);// deploy for no longer than this amount of seconds
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        // Function assumes positive is forward.
        Robot.collectorDeployer.deployInOut(0.68);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        // In this case, run the motor until we have reached/exceeded the interlock limit.
        // Interlock means we have moved the collector far enough out that it will not interfere with the shooter.
        boolean reachedLimit = Robot.collectorDeployer.reachedLimit("Interlock");
        boolean finished = (isTimedOut() || reachedLimit);
        if (Robot.m_debugOn && finished) System.out.println ("CollectDeployPastInterlock command has finished.");
        return finished;
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.collectorDeployer.stop();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
