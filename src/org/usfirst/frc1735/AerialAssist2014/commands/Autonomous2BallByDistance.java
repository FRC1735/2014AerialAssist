// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class Autonomous2BallByDistance extends CommandGroup {
    
    public  Autonomous2BallByDistance() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        
        // The ultimate stretch goal!
        /* The Plan:
         *       - Start with one ball loaded.
         *       - Drop the collector to trap a ball directly behind us.
         *       - Drive until we are X feed away from the wall
         *       - Shoot the ball that was loaded (and presumably held in place by the other ball we're dragging)
         *       - Engage the roller and deployment arm to pull in the trapped ball
         *       - Extend the collector arm
         *       - Shoot the second ball!
         */
        
        // Reset the gyro so that we have the most accurate driving direction
        addSequential(new ResetGyro());
        
        // Extend the collector arm
        // Collector has to extend BEFORE we drive because we need it extended to hold the trapped ball while moving.
        // Experimental results indicate we hit the ball before the limit switch, so the command needs to time out or we will hang here...
        //System.out.println("Initial extend");
        addSequential(new CollectDeployExtend(0.3)); // Arg is timeout in secs
        
        // We tend to leave the ball behind when we start moving...  So engage the collector's roller to (hopefully) compensate for that.
        //System.out.println("Turn on roller");
        addParallel(new CollectRollerIn()); // Do this in parallel with the drive so that the both run together.
        //System.out.println("Drive");
        // 1.75 sec gets us 9 feet from back wall; 2.5 should be right at the hairy limit of hitting the wall.
        addSequential(new DriveWithLimits(2.5,9.5)); // Args are seconds and feet-from-wall, whichever comes first.
        
        // NOTE:  There's a question as to whether the ball will be in the proper loaded position after we move with collector deployed.
        // We MAY need to retract the collector for a moment and push the ball back into place.
        
        // We should be in the correct zone, and hopefully 9 feet from the goal.  Let's shoot our pre-loaded ball!
        //System.out.println("First Shot");
        addSequential(new ShootExtend()); // Shoot first ball.  Collector is out of the way via the first command.
        addSequential(new ShootRetract());// also retract the shooter when done.
        
        // Now for the tough part.  We need to load the second ball that we dragged over here.
        // This will require engaging the roller AND moving the arm inward as well!
        //System.out.println("Turn on roller for 2.5 sec");
        addSequential(new CollectRollerIn(2.5));  //Turn on the roller for a moment to pull the ball in

        // At this point, we should have hold of the second ball.  Let's load it.        
        //System.out.println("Roller on");
        // Start the roller again, since the previous command will have timed out and stopped the roller.
        addParallel(new CollectRollerIn()); // Note:  We need to run this while we move the arm in parallel.
        //System.out.println("Retract with ball");
        addSequential(new CollectDeployRetract(0.3)); // Start retracting the arm in parallel with this.  We won't hit a limit switch if a ball's in placem so beeds a timeout.
        
        // Stop the roller.  This will cause any currently running command (like the RollerIn command above) to be cancelled.
        // System.out.println("stop roller");
        addSequential(new CollectRollerStop());


        // At this point, the second ball should be loaded.
           // Bonus points:  IF we shot the first ball within the first five seconds, we might want the second one in the second five seconds to guarantee at least one was "hot".
           // This would require a timer check to detect total time spent in the command since invoking, and delay for the balance.  Not coding that just yet...
        //We need to extend the collector and shoot.
        //System.out.println("Extend collector");
        addSequential(new CollectDeployExtend()); // Don't forget to get the collector arm out of the way!!!!

        //System.out.println("delay 1 sec");
        addSequential(new Delay(1)); // Let the ball settle into place without the collector arm holding it
        
        //System.out.println("second shot");
        addSequential(new ShootExtend()); // Shoot the second ball
        addSequential(new ShootRetract());
        
        
                // And... we're done.
        

    }
}
