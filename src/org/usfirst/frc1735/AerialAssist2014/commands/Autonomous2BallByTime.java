// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1735.AerialAssist2014.commands;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Autonomous2BallByTime extends CommandGroup {
    
    public  Autonomous2BallByTime() {
        double timeout;
        double magnitude;
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // Reset the gyro so that we have the most accurate driving direction
        // 1.
        addSequential(new ResetGyro());
        
        //System.out.println("Initial delay");
        // 2.
        addSequential(new Delay(0.25));
        
        // Extend the collector arm
        // Collector has to extend BEFORE we drive because we need it extended to hold the trapped ball while moving.
        // Experimental results indicate we hit the ball before the limit switch, so the command needs to time out or we will hang here...
        //System.out.println("Initial extend");
        // 3.
        addSequential(new CollectDeployExtend(0.3)); // Arg is timeout in secs
        //pre-start the roller
        // 4.
        addSequential(new CollectRollerIn(0.25)); // Do this in parallel with the drive so that the both run together.
        
        // We tend to leave the ball behind when we start moving...  So engage the collector's roller to (hopefully) compensate for that.
        //System.out.println("Turn on roller");
        // deliberate to make this longer than the drive.  want roller to continue for a moment after we stop.
        // 5.
        // Actual values set in oi.java
        //timeout = SmartDashboard.getNumber("firstBallRollerTimeout", 1); // a one second default should be easy to see if we accidentally got it
        addParallel(new CollectRollerIn(3)); // Do this in parallel with the drive so that the both run together.
        //System.out.println("Drive");
        // continuous variation will re-extend if the ball forces us off the limit switch
        //timeout = SmartDashboard.getNumber("firstBallDriveTimeout", 1); // a one second default should be easy to see if we accidentally got it
        //magnitude = SmartDashboard.getNumber("firstBallDriveSpeed", .1); // a 10% default should be easy to see if we accidentally got it
        addParallel(new CollectDeployExtend(2.875)); // Arg is timeout in secs
        addSequential(new DriveWithLimits(2.875,0, 0.65)); // Args are seconds and feet-from-wall (whichever comes first) and power.
        
        // NOTE:  There's a question as to whether the ball will be in the proper loaded position after we move with collector deployed.
        // We MAY need to retract the collector for a moment and push the ball back into place.
        // delay and see if that's enough to recenter
        // 6.
        addSequential(new Delay(0.75));
        
        // We should be in the correct zone, and hopefully 9 feet from the goal.  Let's shoot our pre-loaded ball!
        //System.out.println("First Shot");
        // 7-8.
        addSequential(new ShootExtend(.95)); // Shoot first ball.  Collector is out of the way via the first command.
        addSequential(new ShootRetract());// also retract the shooter when done.
        
        // Now for the tough part.  We need to load the second ball that we dragged over here.
        // This will require engaging the roller AND moving the arm inward as well!
        //System.out.println("Turn on roller for 2.5 sec");
        // 9.
        //timeout = SmartDashboard.getNumber("backDriveTimeout", 1); // a one second default should be easy to see if we accidentally got it
        //magnitude = SmartDashboard.getNumber("backDriveSpeed", -.1); // a 10% default should be easy to see if we accidentally got it
        addParallel(new DriveWithLimits(0.35, 0, -0.5)); // Back up a bit.  time, dist from wall, and magnitude
        addSequential(new CollectRollerIn(2.25));  //Turn on the roller for a moment to pull the ball in

        // At this point, we should have hold of the second ball.  Let's load it.        
        //System.out.println("Roller on");
        // Start the roller again, since the previous command will have timed out and stopped the roller.
        // 10.
        addParallel(new CollectRollerIn(.4)); // Note:  We need to run this while we move the arm in parallel.
        //System.out.println("Retract with ball");
        addSequential(new CollectDeployRetract(0.4)); // Start retracting the arm in parallel with this.  We won't hit a limit switch if a ball's in placem so beeds a timeout.
        
        // Stop the roller.  This will cause any currently running command (like the RollerIn command above) to be cancelled.
        // System.out.println("stop roller");
        // 11.
        addSequential(new CollectRollerStop());


        // At this point, the second ball should be loaded.
           // Bonus points:  IF we shot the first ball within the first five seconds, we might want the second one in the second five seconds to guarantee at least one was "hot".
           // This would require a timer check to detect total time spent in the command since invoking, and delay for the balance.  Not coding that just yet...
        //We need to extend the collector and shoot.
        //System.out.println("Extend collector");
        // 12.
        addParallel(new CollectRollerIn(0.5)); //keep roller going while extending to avoid ball entrapment
        addSequential(new CollectDeployExtend(.5)); // Don't forget to get the collector arm out of the way!!!!

        //System.out.println("delay 1 sec");
        // 13.
        addSequential(new Delay(.875)); // Let the ball settle into place without the collector arm holding it
        
        //System.out.println("second shot");
        // 14-15.
        //magnitude = SmartDashboard.getNumber("secondShotStrength", .30); // a 30% default should be easy to see if we accidentally got it
        addSequential(new ShootExtend(0.98)); // Shoot the second ball with the specified strength
        addSequential(new ShootRetract());
        
        
        // And... we're done.

    }
}
