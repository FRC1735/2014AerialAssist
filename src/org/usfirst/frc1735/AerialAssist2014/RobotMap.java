// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc1735.AerialAssist2014;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainrightFront;
    public static SpeedController driveTrainleftFront;
    public static SpeedController driveTrainrightRear;
    public static SpeedController driveTrainleftRear;
    public static RobotDrive driveTrainRobotDrive41;
    public static Gyro driveTrainGyro1;
    public static SpeedController shooterCatapultMotor;
    public static SpeedController shooterCatapultMotor2;
    public static SpeedController shooterCatapultMotor3;
    public static AnalogChannel shooterExtensionStringPot;
    public static DigitalInput shooterShooterExtendLimit;
    public static DigitalInput shooterShooterReturnLimit;
    public static Relay collectorRollerRollerMotor;
    public static SpeedController collectorDeployerDeploymentMotor;
    public static SpeedController collectorDeployerDeploymentMotor2;
    public static AnalogChannel collectorDeployerExtensionStringPot;
    public static DigitalInput collectorDeployerDeployLimitOut;
    public static DigitalInput collectorDeployerDeployLimitIn;
    public static AnalogChannel rangeUltrasonicRange;
    public static Relay rangeShotLightRelay;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainrightFront = new Victor(1, 1);
	LiveWindow.addActuator("Drive Train", "rightFront", (Victor) driveTrainrightFront);
        
        driveTrainleftFront = new Victor(1, 2);
	LiveWindow.addActuator("Drive Train", "leftFront", (Victor) driveTrainleftFront);
        
        driveTrainrightRear = new Victor(1, 3);
	LiveWindow.addActuator("Drive Train", "rightRear", (Victor) driveTrainrightRear);
        
        driveTrainleftRear = new Victor(1, 4);
	LiveWindow.addActuator("Drive Train", "leftRear", (Victor) driveTrainleftRear);
        
        driveTrainRobotDrive41 = new RobotDrive(driveTrainleftFront, driveTrainleftRear,
              driveTrainrightFront, driveTrainrightRear);
	
        driveTrainRobotDrive41.setSafetyEnabled(true);
        driveTrainRobotDrive41.setExpiration(0.1);
        driveTrainRobotDrive41.setSensitivity(0.5);
        driveTrainRobotDrive41.setMaxOutput(1.0);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainGyro1 = new Gyro(1, 1);
	LiveWindow.addSensor("Drive Train", "Gyro 1", driveTrainGyro1);
        driveTrainGyro1.setSensitivity(0.007);
        shooterCatapultMotor = new Talon(1, 5);
	LiveWindow.addActuator("Shooter", "Catapult Motor", (Talon) shooterCatapultMotor);
        
        shooterCatapultMotor2 = new Talon(1, 6);
	LiveWindow.addActuator("Shooter", "Catapult Motor 2", (Talon) shooterCatapultMotor2);
        
        shooterCatapultMotor3 = new Talon(1, 7);
	LiveWindow.addActuator("Shooter", "Catapult Motor 3", (Talon) shooterCatapultMotor3);
        
        shooterExtensionStringPot = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Shooter", "Extension String Pot", shooterExtensionStringPot);
        
        shooterShooterExtendLimit = new DigitalInput(1, 1);
	LiveWindow.addSensor("Shooter", "Shooter Extend Limit", shooterShooterExtendLimit);
        
        shooterShooterReturnLimit = new DigitalInput(1, 2);
	LiveWindow.addSensor("Shooter", "Shooter Return Limit", shooterShooterReturnLimit);
        
        collectorRollerRollerMotor = new Relay(1, 1);
	LiveWindow.addActuator("Collector Roller", "Roller Motor", collectorRollerRollerMotor);
        
        collectorDeployerDeploymentMotor = new Victor(1, 8);
	LiveWindow.addActuator("Collector Deployer", "Deployment Motor", (Victor) collectorDeployerDeploymentMotor);
        
        collectorDeployerDeploymentMotor2 = new Talon(1, 9);
	LiveWindow.addActuator("Collector Deployer", "Deployment Motor 2", (Talon) collectorDeployerDeploymentMotor2);
        
        collectorDeployerExtensionStringPot = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Collector Deployer", "Extension String Pot", collectorDeployerExtensionStringPot);
        
        collectorDeployerDeployLimitOut = new DigitalInput(1, 5);
	LiveWindow.addSensor("Collector Deployer", "Deploy Limit Out", collectorDeployerDeployLimitOut);
        
        collectorDeployerDeployLimitIn = new DigitalInput(1, 6);
	LiveWindow.addSensor("Collector Deployer", "Deploy Limit In", collectorDeployerDeployLimitIn);
        
        rangeUltrasonicRange = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Range", "UltrasonicRange", rangeUltrasonicRange);
        
        rangeShotLightRelay = new Relay(1, 2);
	LiveWindow.addActuator("Range", "Shot Light Relay", rangeShotLightRelay);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
